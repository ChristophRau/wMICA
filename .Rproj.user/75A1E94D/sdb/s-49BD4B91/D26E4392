{
    "collab_server" : "",
    "contents" : "options(stringsAsFactors = FALSE)\nlibrary(sem) # for SEM fitting, RAM model format 'mod' and Maximum likelihood indices of SEM fit.\nlibrary(e1071) # for impute: to handle NA in the data by filling in the median\nlibrary(impute) #\n\nsource(\"NeoFunctions.R\")\n\noutname=\"NEO_ADAMTS2_Out_0p0001_v2.csv\"\n\nlinks=read.csv(\"Links_Mod5.csv\")   #All Links\nlinks=links[,-3]\n\nSNPs=read.delim(\"Iso550Genotype_ReadyForNEO.txt\",check.names=F)  #Genotypes\nexpr=read.csv(\"IsoOnly_ForNEO.csv\",row.names=1,check.names=F)    #Expressions\n\nSigSNPs=read.csv(\"ISO550k_Lessthan0p001_2MBWindows.csv\") #SigSNPs(to filter)\n\nall_probes=names(table(c(links[,1],links[,2])))  #Get ALL Genes of Interest\n\nexpr=expr[match(all_probes,rownames(expr)),]\n\ncutoff=.0001\n\ntable(SigSNPs[,5]<cutoff)\n\n\nSigSNPs=SigSNPs[SigSNPs[,5]<cutoff,]\n\ntemp=c()\nfor(i in 1:length(all_probes)){   #Get all Significant SNP names in module.  Might want to modify to a more stringent cutoff...\n  print(i/length(all_probes)*100)\n  temp2=grep(paste0(\"^\",all_probes[i],\"$\"),SigSNPs[,1])\n  temp2=SigSNPs[temp2,]\n  temp=rbind(temp,temp2)\n}\nSigSNPs=temp\n\nSigSNPs=SigSNPs[!is.na(SigSNPs[,4]),]\n\nall_SNPs=names(table(SigSNPs[,4]))   #This names all the significant SNPs...\n\nSNPs=SNPs[match(all_SNPs,SNPs[,1]),]  #This limits our SNP table to just the SNPs we care about...\nrownames(SNPs)=SNPs[,1]   #Cleaning.\nSNPs=SNPs[,-1]\n\ncolnames(SNPs)   #might not need this last one...\nSNPs=SNPs[,-85]\n\n\n\n\nSNPs=t(SNPs)    #And finally, put it in the right orientation!\nexpr=t(expr)\n\ntemp=c()        #Get rid of Snps which all have the same value (how did these even get in here?)\ntemp_names=c()\nfor(i in 1:ncol(SNPs)){\n  print(i/ncol(SNPs)*100)\n  if(length(table(SNPs[,i]))!=1)\n  {\n    temp=cbind(temp,SNPs[,i])\n    temp_names=c(temp_names,colnames(SNPs)[i])\n  }\n}\ncolnames(temp)=temp_names\nSNPs=temp\n\n\n\n\n\nNEO_Data=cbind(SNPs,expr)   #This is our 'master' file.  We'll use this from here on out.\n\noutdata=c()\nFirsttime=TRUE  #Something special happens the first time!\noutfile=file(outname,\"w\")\n#count=1\nfor(i in 1:nrow(links)){   #First get the genes.\n  print(i/nrow(links)*100)\n  gene1=links[i,1]\n  gene2=links[i,2]\n  gene1_place=match(gene1,colnames(NEO_Data))\n  gene2_place=match(gene2,colnames(NEO_Data))\n\n  temp=grep(paste0(\"^\",gene1,\"$\"),SigSNPs[,1])  #Then the SNPs\n  temp=SigSNPs[temp,4]\n  temp2=grep(paste0(\"^\",gene2,\"$\"),SigSNPs[,1])\n  temp2=SigSNPs[temp2,4]\n  temp=c(temp,temp2)\n  temp=names(table(temp))\n  SNP_places=match(temp,colnames(NEO_Data))\n  SNP_places=SNP_places[!is.na(SNP_places)]\n  if(length(SNP_places)>0){  #If there are SNPs to use...  RUN NEO!\n    SMA_Current=single.marker.analysis(NEO_Data,snpcols=SNP_places,genecols=gene1_place,traitcols=gene2_place)\n    SMA_Working=SMA_Current       #Process for Forward Reactions\n    SMA_Working=SMA_Working[SMA_Working[,6]>.75,]\n    SMA_Working=SMA_Working[SMA_Working[,12]<.05,]\n    SMA_Out=SMA_Working   #Output part 1\n    SMA_Working=SMA_Current   #Process for Negative Reactions\n    SMA_Working=SMA_Working[SMA_Working[,7]>.75,]\n    SMA_Working=SMA_Working[SMA_Working[,13]<.05,]\n    SMA_Out=rbind(SMA_Out,SMA_Working)   #Get FINAL Data\n    if(Firsttime){\n      temp=colnames(SMA_Out)\n      temp=paste(temp,collapse=\",\")\n      cat(file=outfile,temp,sep=\"\\n\")\n      Firsttime=FALSE\n    }\n    outdata=apply(SMA_Out,1,paste,collapse=\",\")\n    cat(file=outfile,outdata,sep=\"\\n\")\n    #outdata=rbind(outdata,SMA_Out)  #And we're done!\n    #if(i%%100==0){\n    #  outname=paste0(\"NEO_Out_Part_\",count,\".csv\")\n   #   count=count+1\n   #   write.csv(file=outname,outdata,row.names=F)\n   #   outdata=c()\n    #}\n  }\n}\n\nclose(outfile)\n\n\ntemp=dir()\noutdata=c()\nfor(i in temp){\n  print(i)\n  indata=read.csv(temp,check.names=F)\n  outdata=rbind(outdata,temp)\n}\n\n\n\n\n\n\n##############\nSMA_Single_Gene_MODULE5=single.marker.analysis(NEO_Data,snpcols=c(1:101),genecols=c(102:138),traitcols=c(139:153))\n\n\noutdata=c()\nfor(i in 104:138){\n  gene_name=colnames(NEO_Data)[i]\n  print(gene_name)\n  links_to=indata[grep(gene_name,indata[,1]),2]\n  traitcols=0\n  traitcols=match(links_to,colnames(NEO_Data))\n  traitcols=traitcols[!is.na(traitcols)]\n  if(traitcols!=0){\n  SMA_Current=single.marker.analysis(NEO_Data,snpcols=c(1:101),genecols=i,traitcols=traitcols)\n  SMA_Working=SMA_Current\n  SMA_Working=SMA_Working[SMA_Working[,6]>.75,]\n  SMA_Working=SMA_Working[SMA_Working[,12]<.05,]\n  out_names=c()\n  out_names=table(SMA_Working[,5])\n  out_names=names(out_names[out_names>0])\n  out_names=substr(out_names,3,nchar(out_names))\n  if(length(out_names)>0){\n  outrows=cbind(gene_name,out_names)\n  outdata=rbind(outdata,outrows)\n  }\n  }\n  }\n\n\n\n\n\n\n\n\n\n\n\n",
    "created" : 1505240425402.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3966890528",
    "id" : "D26E4392",
    "lastKnownWriteTime" : 1505240477,
    "last_content_update" : 1505240639532,
    "path" : "C:/Work/8 - Code/SuperNeo/Run_NEO_ADAMTS2.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 10,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}